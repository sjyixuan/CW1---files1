// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //put your codes here

    // Data load mux
    DMux4Way(a=load, sel=address[14], c=dataLoad, d=dataStore)

    // Address MUX for screen memory mapping
    Mux2Way16(a=addr[12..0], b=address[12..1], sel=address[13], out=addressOut)

    // RAM and I/O Components
    RAM8K(in=in, load=dataLoad, address=addressOut, out=outRAM)
    RAM8K(in=in, load=dataStore, address=addressOut, out=outIO)

    // Output MUX
    Mux4Way16(a=outRAM, b=outIO, sel=address[14..13], out=out)

}
