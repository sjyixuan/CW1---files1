// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Decode instruction to determine if it's a load operation
    Not(in = instruction[15], out = instructionA);
    Not(in = instructionA, out = instructionC);

    // Check if the instruction is a load operation for ALU
    And(a = instructionC, b = instruction[5], out = isLoadAluOut);
    // Select input for ARegister based on loadALUOut
    Mux16(a = instruction, b = outALU, sel = isLoadAluOut, out = inAR);

    // Check if the instruction is a load operation for ARegister
    Or(a = instructionA, b = instruction[5], out = isLoadAR);
    // Update ARegister based on loadAR
    ARegister(in = inAR, load = isLoadAR, out = outAR, out[0..14] = addressM);

    // Select input for ALU based on the output of ARegister and inM
    Mux16(a = outAR, b = inM, sel = instruction[12], out = outAM);

    // Determine if the instruction requires writing to M
    And(a = instructionC, b = instruction[3], out = writeM);
    // Determine if the instruction is a load operation for DRegister
    And(a = instruction[4], b = instructionC, out = isLoadDR); 
    // Update DRegister based on loadDR
    DRegister(in = outALU, load = isLoadDR, out = outDR);

    // Decode instruction to determine ALU control bits
    And(a = instructionC, b = instruction[6], out = no);
    And(a = instructionC, b = instruction[7], out = f);
    And(a = instructionC, b = instruction[8], out = ny);
    And(a = instructionC, b = instruction[9], out = zy);
    And(a = instructionC, b = instruction[10], out = nx);
    And(a = instructionC, b = instruction[11], out = zx);

    // Perform ALU operation based on control bits
    ALU(x = outDR, y = outAM, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outALU, out = outM, zr = zr, ng = ng);

    // Decode instruction to determine jump conditions
    And(a = instructionC, b = instruction[0], out = isGT);
    And(a = instructionC, b = instruction[1], out = isEQ);
    And(a = instructionC, b = instruction[2], out = isLT);

    // Determine jump conditions based on ALU output
    And(a = ng, b = isLT, out = isLtJump);
    And(a = zr, b = isEQ, out = isEqJump);

    // Compute final jump conditions
    Not(in = ng, out = notNg);
    Not(in = zr, out = notZr);
    And(a = notNg, b = notZr, out = isOutGt);
    
    // Determine if the instruction is a jump greater than
    And(a = isOutGt, b = isGT, out = isGtJump);

    // Combine jump conditions to determine if a jump is needed
    Or(a = isLtJump, b = isEqJump, out = isJump);
    Or(a = isJump, b = isGtJump, out = jump);

    // Update program counter based on jump condition
    PC(in = outAR, load = jump, inc = true, reset = reset, out[0..14] = pc);

}
