// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Control bits
    Not(in = instruction[15], out = isA);
    Not(in = isA, out = isC);

    And(a = isC, b = instruction[5], out = isLoadALUOut);

    Or(a = isA, b = instruction[5], out = isLoadAR);
    Or(a = isC, b = instruction[12], out = isLoadAR);

    Mux16(a = instruction, b = outALU, sel = isLoadALUOut, out = inAR);

    // A register
    ARegister(in = inAR, load = isLoadAR, out = outAR, out[0..14] = addressM);

    // ALU input Mux
    Mux16(a = outAR, b = inM, sel = instruction[12], out = outAM);

    // ALU
    ALU(x = outDR, y = outAM, zx = instruction[11], nx = instruction[10],
        zy = instruction[9], ny = instruction[8], f = instruction[7],
        no = instruction[6], out = outALU, zr = zr, ng = ng);

    // Data Register
    And(a = isC, b = instruction[4], out = isLoadDR);
    DRegister(in = outALU, load = isLoadDR, out = outDR);

    // Jump conditions
    And(a = isC, b = instruction[0], out = jGT);
    And(a = isC, b = instruction[1], out = jEQ);
    And(a = isC, b = instruction[2], out = jLT);

    // Jump logic
    And(a = ng, b = jLT, out = isLTJump);
    And(a = zr, b = jEQ, out = isEQJump);

    Not(in = ng, out = notNG);
    Not(in = zr, out = notZR);
    And(a = notNG, b = notZR, out = isOutGT);

    And(a = isOutGT, b = jGT, out = isGTJump);

    Or(a = isLTJump, b = isEQJump, out = isJump);
    Or(a = isJump, b = isGTJump, out = jump);

    // Program Counter
    PC(in = outAR, load = jump, inc = true, reset = reset, out[0..14] = pc);

    // Memory write control
    And(a = isC, b = instruction[3], out = writeM);
}
